par(mfrow=c(1,2))
hist(y1, probability = T, xlim =c(-2, 2), ylim=c(0,0.65),
main="(x1+x2+x3)/3", xlab='',col='orange', border = 'red')
hist(y2, probability = T, xlim=c(-2, 2), ylim=c(0, 0.65),
main='(1*x1+2*x2+6*x3)/6', xlab='',col='orange', border = 'red')
x <- seq(-3,3,by=0.01)
y <- dnorm(x)
y.1 <- dnorm(x, sd = sqrt(1/3))
y.2 <- dnorm(x, sd = sqrt(7/18))
pnorm(0.1, sd=sqrt(1/3)) - pnorm(-0.1, sd=sqrt(1/3))
pnorm(0.1, sd=sqrt(7/18)) - pnorm(-0.1 , sd=sqrt(7/18))
plot(x, y, type = 'l', ylim=c(0, 0.8), axes =F, ylab = "",
lwd = 3, col='yellow')
lines(x, y.1, col='red', lwd=3)
lines(x, y.2, col='green', lty=2, lwd=3)
axis(1)
mean.seq <- function(x) {
n <- length(x)
sum <- 0
n2 <- 0
for(i in 1:n){
newx <- i * x[i]
sum <- sun + newx
n2 <- n2 + i
}
return(sum/n2)
}
y1 <- rep(NA, 1000)
y2 <- rep(NA, 1000)
for(i in 1:1000) {
smp <- rnorm(3)
y1[i] <- mean(smp)
y2[i] <- mean.seq(smp)
}
n1 <- length(y1[y1 > -0.1]) &(y1< 0.1)])
n2 <- length(y2[y2 > -0.1]) &(y2< 0.1)])
data.frame(mean = mean(y1), var = var(y1),n =n1)
data.frame(mean = mean(y2), var = var(y2),n =n2)
par(mfrow=c(1,2))
hist(y1, probability = T, xlim =c(-2, 2), ylim=c(0,0.65),
main="(x1+x2+x3)/3", xlab='',col='orange', border = 'red')
hist(y2, probability = T, xlim=c(-2, 2), ylim=c(0, 0.65),
main='(1*x1+2*x2+6*x3)/6', xlab='',col='orange', border = 'red')
hist(y2, probability = T, xlim=c(-2, 2), ylim=c(0, 0.65),
main='(1*x1+2*x2+6*x3)/6', xlab='',col='orange', border = 'red')
hist(y1, probability = T, xlim =c(-2, 2), ylim=c(0,0.65),
main="(x1+x2+x3)/3", xlab='',col='orange', border = 'red')
hist(y1, probability = T, xlim =c(-2, 2), ylim=c(0,0.65),
main="(x1+x2+x3)/3", xlab='',col='orange', border = 'red')
hist(y2, probability = T, xlim=c(-2, 2), ylim=c(0, 0.65),
main="(1*x1+2*x2+6*x3)/6", xlab='',col='orange', border = 'red')
hist(y2, probability = T, xlim=c(-2, 2), ylim=c(0, 0.65),
main="(1*x1 + 2*x2 + 6*x3)/6", xlab='',col='orange', border = 'red')
x <- seq(-3,3,by=0.01)
options(digits=3)
set.seed(1)
mean.seq <- function(x) {
n <- length(x)
sum <- 0
n2 <- 0
for(i in 1:n){
newx <- i * x[i]
sum <- sun + newx
n2 <- n2 + i
}
return(sum/n2)
}
y1 <- rep(NA, 1000)
y2 <- rep(NA, 1000)
for(i in 1:1000) {
smp <- rnorm(3)
y1[i] <- mean(smp)
y2[i] <- mean.seq(smp)
}
n1 <- length(y1[y1 > -0.1]) &(y1< 0.1)])
n2 <- length(y2[y2 > -0.1]) &(y2< 0.1)])
data.frame(mean = mean(y1), var = var(y1),n =n1)
data.frame(mean = mean(y2), var = var(y2),n =n2)
n1 <- length(y1[y1 > -0.1]) &(y1< 0.1)])
n1 <- length(y1[(y1 > -0.1]) &(y1< 0.1)])
n1 <- length(y1[(y1 > -0.1) &(y1< 0.1)])
n2 <- length(y2[(y2 > -0.1) &(y2< 0.1)])
data.frame(mean = mean(y1), var = var(y1),n =n1)
data.frame(mean = mean(y2), var = var(y2),n =n2)
par(mfrow=c(1,2))
hist(y1, probability = T, xlim =c(-2, 2), ylim=c(0, 0.65),
main="(x1+x2+x3)/3", xlab='',col='orange', border = 'red')
hist(y2, probability = T, xlim=c(-2, 2), ylim=c(0, 0.65),
main="(1*x1 + 2*x2 + 6*x3)/6", xlab='',col='orange', border = 'red')
mean.seq <- function(x) {
n <- length(x)
sum <- 0
n2 <- 0
for(i in 1:n){
newx <- i * x[i]
sum <- sun + newx
n2 <- n2 + i
}
return(sum/n2)
}
y1 <- rep(NA, 1000)
y2 <- rep(NA, 1000)
for(i in 1:1000) {
smp <- rnorm(3)
y1[i] <- mean(smp)
y2[i] <- mean.seq(smp)
}
n1 <- length(y1[(y1 > -0.1) &(y1< 0.1)])
n1 <- length(y1[(y1 > -0.1) &(y1< 0.1)])
for(i in 1:1000) {
smp <- rnorm(3)
y1[i] <- mean(smp)
y2[i] <- mean.seq(smp)
}
sum <- sum + newx
mean.seq <- function(x) {
n <- length(x)
sum <- 0
n2 <- 0
for(i in 1:n){
newx <- i * x[i]
sum <- sum + newx
n2 <- n2 + i
}
return(sum/n2)
}
y1 <- rep(NA, 1000)
y2 <- rep(NA, 1000)
for(i in 1:1000) {
smp <- rnorm(3)
y1[i] <- mean(smp)
y2[i] <- mean.seq(smp)
}
n1 <- length(y1[(y1 > -0.1) &(y1< 0.1)])
n2 <- length(y2[(y2 > -0.1) &(y2< 0.1)])
data.frame(mean = mean(y1), var = var(y1),n =n1)
data.frame(mean = mean(y2), var = var(y2),n =n2)
par(mfrow=c(1,2))
hist(y1, probability = T, xlim =c(-2, 2), ylim=c(0, 0.65),
main="(x1+x2+x3)/3", xlab='',col='orange', border = 'red')
hist(y2, probability = T, xlim=c(-2, 2), ylim=c(0, 0.65),
main="(1*x1 + 2*x2 + 6*x3)/6", xlab='',col='orange', border = 'red')
library(prob)
n <- 3
smps.all <- rolldie(n)
str(smps.all)
head(smps.all, n=3)
smps.all <- rolldie(n)
n <- 3
smps.all <- rolldie(n)
str(smps.all)
head(smps.all, n=3)
is.even <- function(x) return(!x%%2)
var.p <- function(x){
return(sum(is.even(x))^2/length(x))   )
}
p.even <- function(x, s.size=3) {
return(sum(is.even(x))/ s.size)
}
phat <- apply(smps.all, 1, even)
is.even <- function(x) return(!x%%2)
var.p <- function(x){
return(sum(is.even(x))^2/length(x))   )
}
p.even <- function(x, s.size=3) {
return(sum(is.even(x))/ s.size)
}
is.even <- function(x) return(!x%%2)
var.p <- function(x){
return(sum(is.even(x))^2/length(x))   )
}
var.p <- function(x){
return(sum(is.even(x))^2/length(x))   )
}
p.even <- function(x, s.size=3) {
return(sum(is.even(x))/ s.size)
}
var.p <- function(x){
return(sum(is.even(x))^2/length(x))   )
}
is.even <- function(x) return(!x%%2)
var.p <- function(x)  {
return(sum(is.even(x))^2/length(x))   )
}
is.even <- function(x) return(!x%%2)
var.p <- function(x)  {
return(sum(x-mean(x))^2/length(x))   )
}
is.even <- function(x) return(!x%%2)
var.p <- function(x)  {
return(sum((x-mean(x))^2/length(x))   )
}
p.even <- function(x, s.size=3) {
return(sum(is.even(x))/ s.size)
}
phat <- apply(smps.all, 1, even)
mean(phat)
(p.p <- 0.5)
var.p(phat)
phat <- apply(smps.all, 1, even)
phat <- apply(smps.all, 1, p.even)
mean(phat)
(p.p <- 0.5)
var.p(phat)
(p.p *(1-p.p)/3)
sqrt(var.p(phat))
# 유효성 모의 실험
x <- seq(-3,3,by=0.01)
y <- dnorm(x)
y.1 <- dnorm(x, sd = sqrt(1/3))
y.2 <- dnorm(x, sd = sqrt(7/18))
pnorm(0.1, sd=sqrt(1/3)) - pnorm(-0.1, sd=sqrt(1/3))
pnorm(0.1, sd=sqrt(7/18)) - pnorm(-0.1 , sd=sqrt(7/18))
plot(x, y, type = 'l', ylim=c(0, 0.8), axes =F, ylab = "",
lwd = 3, col='yellow')
lines(x, y.1, col='red', lwd=3)
lines(x, y.2, col='green', lty=2, lwd=3)
axis(1)
options(digits=3)
set.seed(1)
mean.seq <- function(x) {
n <- length(x)
sum <- 0
n2 <- 0
for(i in 1:n){
newx <- i * x[i]
sum <- sum + newx
n2 <- n2 + i
}
return(sum/n2)
}
# 모비율에 대한 점 추정
# 모비율의 추정
n <- 3
smps.all <- rolldie(n)
str(smps.all)
head(smps.all, n=3)
is.even <- function(x) return(!x%%2)
var.p <- function(x)  {
return(sum((x-mean(x))^2/length(x))   )
}
p.even <- function(x, s.size=3) {
return(sum(is.even(x))/ s.size)
}
phat <- apply(smps.all, 1, p.even)
mean(phat)
(p.p <- 0.5)
var.p(phat)
(p.p *(1-p.p)/3)
sqrt(var.p(phat))
par(mforw=c(1,1))
par(mfrow=c(1,1))
par(mfrow=c(1,1))
par(mfrow=c(1,1))
par(mfrow=c(1,1))
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3, 3, by=0.01)
smps <- matrix(rnorm( n * length(x)), ncol=n)
xbar <- apply(smps, 1, maen)
xbar <- apply(smps, 1, mean)
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3, 3, by=0.01)
smps <- matrix(rnorm( n * length(x)), ncol=n)
xbar <- apply(smps, 1, mean)
se <- 1/sqrt(10)
alpha <- 0.05
z <- qnorm(1-alpha/2)
ll <- xbar- z * se
ul <- xbar+ z * se
plot(y, type='n', xlab='trial', ylab='z',
main='95% Confidence Interval for PoPulation mean',
xlim=c(1,100), ylim=c(-1.5,1.5), cex.lab=1.8)
abline(h=0, col='red', lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll*ul > 0, 'red', 'black')
arrows(1:length(x), ll, 1:length(x),'ul',code=3,
angle=90, length=0.02, col=l.c, lwd=1.5)
arrows(1:length(x), ll, 1:length(x),'ul',code=3,
angle=90, length=0.02, col=l.c, lwd=1.5)
arrows(1:length(x), ll, 1:length(x),ul,code=3,
angle=90, length=0.02, col=l.c, lwd=1.5)
par(mfrow=c(1,1))
plot(y, type='n', xlab='trial', ylab='z',
main='95% Confidence Interval for PoPulation mean',
xlim=c(1,100), ylim=c(-1.5,1.5), cex.lab=1.8)
abline(h=0, col='red', lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll*ul > 0, 'red', 'black')
arrows(1:length(x), ll, 1:length(x),ul,code=3,
angle=90, length=0.02, col=l.c, lwd=1.5)
ci.t <- function(x, alpha = 0.05){
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df=n-1)
ll <- m + t *(s/sqrt(n))
ci <- c(1-alpha, ll, m , ul)
names(ci) <- c('Confidence Level', 'Lower limit', 'Mean', 'Upper limit')
return(ci)
}
smp <- c(520, 498, 481, 512, 515, 542, 520, 518, 527, 526)
ci.t(smp)
ci.t(smp, 0.1)
ci.t <- function(x, alpha = 0.05){
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df=n-1)
ll <- m + t *(s/sqrt(n))
ci <- c(1-alpha, ll, m , ul)
names(ci) <- c('Confidence Level', 'Lower limit', 'Mean', 'Upper limit')
return(ci)
}
smp <- c(520, 498, 481, 512, 515, 542, 520, 518, 527, 526)
ci.t(smp)
ci.t(smp, 0.1)
getwd()
data <- read.csv('D:/workspace/R_statictics/ch02/05. 추정/data/2016.6th.csv')
str(data)
getwd()
data <- read.csv('D:/workspace/R_statictics/ch02/05. 추정/data/2016.6th.csv')
str(data)
tmp <- subset(data, data$나이==7)
set.seed(9)
height.p <- tmp$X104.키
set.seed(9)
tmp <- subset(data, data$나이==7)
height.p <- tmp$X104.키
set.seed(9)
height <- height.p[sample(length(height.p),15)]
height
mean(height)
sd(height)
t.test(height, mu=1220)
getwd()
setwd(D:/workspace/R_statictics/ch02/06. 가설검정)
setwd('D:/workspace/R_statictics/ch02/06. 가설검정')
setwd('D:/workspace/R_statictics/ch02/06. 가설검정')
data <- read.csv('D:/workspace/R_statictics/ch02/06. 가설검정/data/2016.6th.csv')
str(data)
tmp <- subset(data, data$나이==7)
height.p <- tmp$X104.키
set.seed(9)
height <- height.p[sample(length(height.p),15)]
height
mean(height)
sd(height)
t.test(height, mu=1220)
tmp <- read.table("./data/restitutiom.txt", header=T)
tmp <- read.table("/data/restitutiom.txt", header=T)
tmp <- read.table("data/restitutiom.txt", header=T)
tmp <- read.table("http://www.amstat.org/publications.jse.datasets/babyboom.dat.txt", header=F)
str(data)
names(data) <- c('time','gender','weight','minutes')
tmp <- subset(data, gender==1)
barx <- mean(weight)
s <- sd(weight)
n <- length(weight)
n <- length(weight)
s <- sd(weight)
n <- length(weight)
barx <- mean(weight)
weight <- tmp[[3]]
barx <- mean(weight)
s <- sd(weight)
n <- length(weight)
h0 <- 2800
(t.t <- (barx - h0)/(s/sqrt(n)))
alpha <- 0.05
(c.u <- qt(1-alpha, fg=n-1))
(p.value <- 1-pt(t.t, df=n-1))
t.test(weight, mu=2800, alternative = 'greater')
(c.u <- qt(1-alpha, fg=n-1))
(c.u <- qt(1-alpha, dg=n-1))
(c.u <- qt(1-alpha, df=n-1))
(p.value <- 1-pt(t.t, df=n-1))
t.test(weight, mu=2800, alternative = 'greater')
t.test(weight, mu=2800, alternative = 'greater')
barx <- mean(weight)
s <- sd(weight)
n <- length(weight)
h0 <- 2800
(t.t <- (barx - h0)/(s/sqrt(n)))
(t.t <- (barx - h0) / (s / sqrt(n)))
alpha <- 0.05
(c.u <- qt(1-alpha, df=n-1))
(c.u <- qt(1-alpha, df=n-1))
(p.value <- 1-pt(t.t, df=n-1))
t.test(weight, mu=2800, alternative = 'greater')
par(mar=c(0,1,1,1))
x <- seq(-3,3, by = 0.001)
y <- dt(x, df=n-1)
plot(x,y, type='l', axes=F, ylim=c(-0.02,0.38))
plot(x,y, type='l', axes=F, ylim=c(-0.02,0.38),
main='',xlab='t', ylab = '')
abline(h=0)
polygon(c(c.u, x[x>c.u],3), c(0,y[x>c.u],0), col=s)
text(c.um -0.02m expression(alpha==0.05), cex=0.8)
arrows(1.8, 0.18, 1.8, 0.09, length=0.05)
text(c.um -0.02, expression(alpha==0.05), cex=0.8)
text(c.m -0.02, expression(alpha==0.05), cex=0.8)
arrows(1.8, 0.18, 1.8, 0.09, length=0.05)
text(c.u -0.02, expression(alpha==0.05), cex=0.8)
arrows(1.8, 0.18, 1.8, 0.09, length=0.05)
text(t.t, -0.02, paste("t=", round(t.t, 3)), pos=4)
arrows(2.7, 0.08, 2.5, 0.03, length=0.05)
polygon(c(c.u, x[x>c.u],3), c(0,y[x>c.u],0), col=s)
text(c.u -0.02, expression(alpha==0.05), cex=0.8)
arrows(1.8, 0.18, 1.8, 0.09, length=0.05)
polygon(c(t.t, x[x>t.t], 3), c(0, y[x>t.t],0), density=20, angle=45)
text(t.t, -0.02, paste("t=", round(t.t, 3)), pos=4)
arrows(2.7, 0.08, 2.5, 0.03, length=0.05)
par(mar=c(0,1,1,1))
x <- seq(-3,3, by = 0.001)
y <- dt(x, df=n-1)
plot(x,y, type='l', axes=F, ylim=c(-0.02,0.38),
main='',xlab='t', ylab = '')
abline(h=0)
polygon(c(c.u, x[x>c.u],3), c(0,y[x>c.u],0), col=s)
text(c.u -0.02, expression(alpha==0.05), cex=0.8)
arrows(1.8, 0.18, 1.8, 0.09, length=0.05)
polygon(c(t.t, x[x>t.t], 3), c(0, y[x>t.t],0), density=20, angle=45)
text(t.t, -0.02, paste("t=", round(t.t, 3)), pos=4)
arrows(2.7, 0.08, 2.5, 0.03, length=0.05)
par(mar=c(0,1,1,1))
x <- seq(-3,3, by = 0.001)
y <- dt(x, df=n-1)
plot(x,y, type='l', axes=F, ylim=c(-0.02,0.38),
main='',xlab='t', ylab = '')
abline(h=0)
polygon(c(c.u, x[x>c.u],3), c(0,y[x>c.u],0), col=s)
text(c.u -0.02, expression(alpha==0.05), cex=0.8)
par(mar=c(0,1,1,1))
x <- seq(-3,3, by = 0.001)
y <- dt(x, df=n-1)
y <- dt(x, df=n-1)
x <- seq(-3,3, by = 0.001)
y <- dt(x, df=n-1)
par(mar=c(0,1,1,1))
x <- seq(-3,3, by = 0.001)
y <- dt(x, df=n-1)
plot(x,y, type='l', axes=F, ylim=c(-0.02,0.38),
main='',xlab='t', ylab = '')
abline(h=0)
par(mar=c(0,1,1,1))
x <- seq(-3,3, by = 0.001)
y <- dt(x, df=n-1)
plot(x,y, type='l', axes=F, ylim=c(-0.02,0.38),
main='',xlab='t', ylab = '')
abline(h=0)
polygon(c(c.u, x[x>c.u],3), c(0,y[x>c.u],0), col=s)
text(c.u -0.02, expression(alpha==0.05), cex=0.8)
arrows(1.8, 0.18, 1.8, 0.09, length=0.05)
polygon(c(t.t, x[x>t.t], 3), c(0, y[x>t.t],0), density=20, angle=45)
text(t.t, -0.02, paste("t=", round(t.t, 3)), pos=4)
arrows(2.7, 0.08, 2.5, 0.03, length=0.05)
x <- seq(-3,3, by = 0.001)
y <- dt(x, df=n-1)
x <- seq(-3,3, by = 0.001)
n <- length(weight)
weight <- tmp[[3]]
n <- length(weight)
tmp <- subset(data, gender==1)
names(data) <- c('time','gender','weight','minutes')
tmp <- read.table("http://www.amstat.org/publications.jse.datasets/babyboom.dat.txt", header=F)
str(data)
names(data) <- c('time','gender','weight','minutes')
tmp <- subset(data, gender==1)
weight <- tmp[[3]]
barx <- mean(weight)
tmp <- read.table("http://www.amstat.org/publications.jse.datasets/babyboom.dat.txt", header=F)
str(data)
names(data) <- c('time','gender','weight','minutes')
plot(x,y, type='l', axes=F, ylim=c(-0.02,0.38),
main='',xlab='t', ylab = '')
abline(h=0)
x <- seq(-3,3, by = 0.001)
y <- dt(x, df=n-1)
getwd()
getwd()
tmp <- read.table("D:/workspace/R_statictics/ch02/06. 가설검정/data(1).restitution.txt",
header=T)
getwd()
tmp <- read.table("D:/workspace/R_statictics/ch02/06. 가설검정/data(1).restitution.txt",
header=T)
tmp <- read.table("D:/workspace/R_statictics/ch02/06. 가설검정/data (1).restitution.txt",
header=T)
tmp <- read.table("D:/workspace/R_statictics/ch02/06. 가설검정/data (1).restitution.txt",
header=T)
tmp <- read.table("D:/workspace/R_statictics/ch02/06. 가설검정/data (1)/restitution.txt",
header=T)
n <- length(rel)
rel <- ifelse(tmp$rst < 0.4134 | tmp$rst > 0.4374,1 , 0)
n <- length(rel)
nos <- sum(rel)
sq <- nos / n
hp <- 0.1
(z <- (sp - hp) /sqrt((hp * ( 1- hp) ) / n ) )
sq <- nos / n
hp <- 0.1
sp <- nos / n
hp <- 0.1
(z <- (sp - hp) /sqrt((hp * ( 1- hp) ) / n ) )
alpha <- 0.05
(c.u <- qnorm(1-alpha))
(p.value <- 1-alpha)
(p.value <- 1 - pnorm(z))
prop.test(nos, n, p=0.1, alternative = 'greater', correct=F)
