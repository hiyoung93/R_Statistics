(con.xy <- com.num / (nrow(hf.son) -1))
cov(hf.son$Father, hf.son$Height)
(r.xy <- cov.xy / (sd(hf.son$Father)* sd(hf.son$Height)))
(cov.xy <- com.num / (nrow(hf.son) -1))
(r.xy <- cov.xy / (sd(hf.son$Father)* sd(hf.son$Height)))
# R 함수를 이용한 공분산(표본)
cov(hf.son$Father, hf.son$Height)
# 각각의 표준편차로 나눔
(r.xy <- cov.xy / (sd(hf.son$Father)* sd(hf.son$Height)))
cor(hf.son$Father, hf.son$Height)
str(hf)
hf$Gender <- factor(hf$Gender, levels=c("M","F"))
hf.son <- subset(hf, Gender="M")
hf.son <- hf.son[c("Father",'Height')]
str(hf.son)
f.mean <- mean(hf.son$Father)
s.mean <- mean(hf.son$Height)
com.num <- sum( (hf.son$Father-f.mean ) * (hf.son$Height - s.mean))
(cov.xy <- com.num / (nrow(hf.son) -1))
# R 함수를 이용한 공분산(표본)
cov(hf.son$Father, hf.son$Height)
# 각각의 표준편차로 나눔
(r.xy <- cov.xy / (sd(hf.son$Father)* sd(hf.son$Height)))
cor(hf.son$Father, hf.son$Height)
str(hf)
hf$Gender <- factor(hf$Gender, levels=c("M","F"))
hf.son <- subset(hf, Gender="M")
hf.son <- hf.son[c("Father",'Height')]
str(hf.son)
f.mean <- mean(hf.son$Father)
s.mean <- mean(hf.son$Height)
com.num <- sum( (hf.son$Father-f.mean ) * (hf.son$Height - s.mean))
(cov.xy <- com.num / (nrow(hf.son) -1))
# R 함수를 이용한 공분산(표본)
cov(hf.son$Father, hf.son$Height)
# 각각의 표준편차로 나눔
(r.xy <- cov.xy / (sd(hf.son$Father)* sd(hf.son$Height)))
cor(hf.son$Father, hf.son$Height)
f.mean <- mean(hf.son$Father)
s.mean <- mean(hf.son$Height)
cov.num <- sum( (hf.son$Father-f.mean ) * (hf.son$Height - s.mean))
(cov.xy <- cov.num / (nrow(hf.son) -1))
# R 함수를 이용한 공분산(표본)
cov(hf.son$Father, hf.son$Height)
# 각각의 표준편차로 나눔
(r.xy <- cov.xy / (sd(hf.son$Father)* sd(hf.son$Height)))
cor(hf.son$Father, hf.son$Height)
sxy <- sum((hf.son$Father - mean.x)*(hf.son$Height - mean.y))
sxx <- sum((hf.son$Father - mean.x)^2)
mean.x <- mean(hf.son$Father)
mean.y <- mean(hf.son$Height)
sxy <- sum((hf.son$Father - mean.x)*(hf.son$Height - mean.y))
sxx <- sum((hf.son$Father - mean.x)^2)
summary(out)
lm(hright~ Father,  data=df.son)
lm(hright~ Father,  data=hf.son)
lm(height~ Father,  data=hf.son)
lm(Height~ Father,  data=hf.son)
# 회귀모형의 유의성 검정
out <- lm(Height ~Father, data=hf.son)
anova(out)
lm(Height~ Father,  data=hf.son)
# 회귀모형의 유의성 검정
out <- lm(Height ~Father, data=hf.son)
anova(out)
# lm() 함수를 이용한 회귀계수 추정
out<- lm(Height~ Father,  data=hf.son)
summary(out)
# 회귀모형의 유의성 검정
par(mfow=c(2,2))
plot(out)
anova(out)
plot(out)
par(mfow=c(2,2))
# 회귀모형의 유의성 검정
par(mfrow=c(2,2))
plot(out)
par(mfrow=c(1,1))
View(women)
View(women) # height(inch), weight(lbs)
# 신장에 따른 몸무게
plot(weight ~ height, data=women)
fit <- lm(weight~height, data=women)
abline(fit, col='red', lwd=2)
summary(fit)
cor.test(women$weight, women$height)
par(mfrow=c(2,2))
plot(fit)# 정규성(2-x), 독립성, 선형선(1-x), 등분산성(3-o)
par(mfrow=c(1,1))
# 다중 회귀 분석
state.x77
haed(state.x77)
states <- as.data.frame(state.x77[c('Murder','Population',
'Illiteracy','Income','Forest')])
par(mfrow=c(1,1))
fit <- lm(Murder~Population + Illiteracy+Income+Forest, data=states)
fit <- lm(Murder~Population + Illiteracy+Income+Forest, data=states)
fit <- lm(Murder~Population + Illiteracy+Income+Forest, data=states)
states <- as.data.frame(state.x77[c('Murder','Population',
'Illiteracy','Income','Forest')])
fit <- lm(Murder~Population + Illiteracy+Income+Forest, data=states)
summary(fit)
par(mfrow=c(2,2))
plot(fit)
fit <- lm(Murder ~ Population + Illiteracy+Income+Forest, data=states)
haed(state.x77)
states <- as.data.frame(state.x77[c('Murder','Population',
'Illiteracy','Income','Forest')])
fit <- lm(Murder ~ Population + Illiteracy+Income+Forest, data=states)
haed(state.x77)
head(state.x77)
states <- as.data.frame(state.x77[c('Murder','Population',
'Illiteracy','Income','Forest')])
fit <- lm(Murder ~ Population + Illiteracy+Income+Forest, data=states)
summary(fit)
par(mfrow=c(2,2))
plot(fit)
fit <- lm(Murder ~ Population + Illiteracy+Income+Forest, data=states)
step(fit1, direction = 'backward')
fit3 <- lm(Murder ~ 1, data=states)
step(fit3,direction = 'forward',
scope=~Population+Illiteracy+Income+Forest)
# Coefficients       : 절편과 계수
# adjusted R-squared : 내가 만든 회귀식이 이 전체 모형의 15.13%를 설명한다는 뜻
par(mfrow=c(2,2))
plot(out)
# 좋은 선형모델이란...(350page)
### ================================================================================
###  3. 회귀분석(2) (335Page)    ==================================================
### ================================================================================
# 1차식 (y=ax+b) -----------------------------------------------------------------
women
plot(women$height,women$weight)
fit  <- lm(weight~height, data=women)
abline(fit,col="red",lwd=2)
summary(fit) # 99% 만족한다.
cor.test(women$weight, women$height)
par(mfrow=c(2,2))
plot(fit)
# 정규성 = 2번 그림 양쪽 끝이 많이 떨어진다.
# 선형성 = 1번 곡선을 이루면 안되나 포물선이다.
# 등분산 = 3번 ok
# 2차식 (y=ax^2+bx+c) -------------------------------------------------------------
fit2 <- lm(weight~height + I(height^2), data=women) # 독립변수 추가
plot(women$height,women$weight)
lines(women$height, fitted(fit2), col="green",lwd=2)
summary(fit2) # 신장의 2차항인 I의 pr(>|t|)가 더 작다 =*** 더 잘 맞다.
par(mfrow=c(2,2))
plot(fit2)
# 정규성 = 2번 만족
# 선형성 = 1번 만족
# 등분산 = 3번 만족
# 3차식 (y=ax^3+bx^2+cx+d) --------------------------------------------------------
fit3 <- lm(weight~height + I(height^2) + I(height^3), data=women) # 독립변수 추가
plot(women$height,women$weight)
lines(women$height, fitted(fit3), col="orange",lwd=2)
summary(fit3)
par(mfrow=c(2,2))
plot(fit3)
# 정규성 = 2번
# 선형성 = 1번
# 등분산 = 3번
# 그러나 그림을 눈으로 확인하여 결론을 내리기 때문에 오류가 있을 수 있고 설득력이 ㄸ러어진다.
# 그래서 AIC라는 함수를 사용한다. 여기에서 숫자가 더 작은 것이 좋다.
AIC(fit2)
AIC(fit3)
# 여기서 추가로 (Overfit 현상)을 적용해보고 생각해보자 : 검색해보기
# ex) 100개의 데이터중 overfit현상을 생각하여 30은 test 70은 train으로 사용한다.
### ================================================================================
###  4. 다중회귀분석    ===========================================================
### ================================================================================
state.x77 # 미국 50개 주에 대한 데이터
head(state.x77)
states <- as.data.frame(state.x77[,c("Murder","Population",
"Illiteracy","Income","Frost")])
# 살인사건에 대한 독립변수가 될 만한 것을 골라서 회귀분석을 해보자.
fit <- lm(Murder ~ Population+Illiteracy+Income+Frost, data=states)
summary(fit)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
fit1 <- lm(Murder ~ .,data=states) # 점(.) : 나머지 변수 전부.
summary(fit1)
# 필요없어보이는 것을 제외하고 다시
fit2 <- lm(Murder ~ Population + Illiteracy, data=states)
summary(fit2)
# AIC(Akaike Information Criterion) : 값이 적을수록 좋은 모델
AIC(fit1, fit2)
# 이것을 봤을때 변수가 여러개일 때는 aic가 작은 놈을 볼때까지 필료한 변수를 고르는 것이 좋다.
# 그러나 일일히
# 1. model을 만들고
# 2. summary를 보고
# 3. plot을 보고
# 4. aic 숫자를 봐야하는가... 만약 변수가 20개이상이면??
# 해서 이것을 자동화해주는 방법이 있다.
# stepwise 중에 두개가 있다. Backward와 Forward
# Backward(모든 변수부터 계산을 하고 그 중에서 p값이 가장 큰놈부터 변수를 제거하면서 aic값이 180까지 자동적으로 돌린다.)
# Forward (상수항부터 변수를 하나씩 하나씩 붙이면서 자동적으로 계산한다. 마찬가지로 aic값이 180까지 자동적으로 돌린다.)
# Backward stepwise regression
step(fit1, direction = 'backward')
fit3
step(fit1, direction = 'forward')
# Backward stepwise regression
step(fit1, direction = 'backward')
step(fit1, direction = 'forward')
# Backward stepwise regression
step(fit1, direction = 'backward')
step(fit1, direction = 'forward')
fit3 <- lm(Murder ~1, data = states)
step(fit3, direction = 'forward',
scope=~ Population+Illiteracy+Income+Forest)
step(fit3, direction = 'forward',
scope=~ Population+Illiteracy+Income+Frost)
step(fit3, direction = 'forward',
scope =list(upper = fit1, lower=fit3))
install.packages('leaps')
library(leaps)
head(data)
data <- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')
str(data)
head(data)
data$rank <- as.factoy(data$rank)
str(data)
model <- glm(admit~ gre+rank, data=data, family= 'binomial')
summary(model)
data <- read.csv('http://stats.idre.ucla.edu/stat/data/binary.csv')
str(data)
head(data)
data$rank <- as.factoy(data$rank)
str(data)
train <- data[1:200, ]
test <- data[201:400, ]
model <- glm(admit~ gre+rank, data=data, family= 'binomial')
summary(model)
## 1. 자료를 바탕으로 회귀식을 구하고,
# 아버지의 키가 165cm일때
# 아들의 키는 얼마일지 예측하시오
x <- 	150  160  170  180  190
y <- 	176  179  182  181  185
## 1. 자료를 바탕으로 회귀식을 구하고,
# 아버지의 키가 165cm일때
# 아들의 키는 얼마일지 예측하시오
x <- 	 c(150, 160, 170, 180, 190)
y <- c(176, 179, 182, 181, 185)
lm(y~x)
# 산점도 그리기
m1 <- lm(y~x)
# 산점도 그리기
m1 <- lm(y~x)
plot(y~x,xlab='아버지',ylab='아들')
plot(y~x,xlab='아버지',ylab='아들')
# 산점도 그리기
m1 <- lm(y~x)
plot(y~x,xlab='아버지',ylab='아들')
plot(y~x)
plot(y~x)
plot(y~x,xlab='아버지',ylab='아들')
abline(m1,col='blue')
# P - Value - 변수가 종속변수에 미치는 영향은 유의한가
# 수정된R 제곱
summary(m1)
# P - Value - 변수가 종속변수에 미치는 영향은 유의한가
# 수정된R 제곱
summary(m1)
## 2. 자료를 바탕으로 회귀식을 구하고,
# 월 소득250일때 신용카드 사용량을 예측하시오
x <- c(100, 200, 300, 400, 500)
y <- c(30, 70, 85, 140, 197)
# 회귀식 추정
lm(y~x)
# 산점도 그리기
m1 <- lm(y~x)
plot(y~x,xlab='월소득',ylab='카드 사용량')
abline(m1,col='blue')
# P - Value - 변수가 종속변수에 미치는 영향은 유의한가
# 수정된R 제곱
summary(m1)
# mtcars의 배기량(disp)에 따른 hp의 회귀식
mtcars
# mtcars의 배기량(disp)에 따른 hp의 회귀식
View(mtcars)
head(mtcars)
str(mtcars)
str(mtcars)
str(hf.son)
str(hf)
hf.son <- subset(hf, Gender="M")
hf.son
mtcare$disp
mtcars$disp <- factor(mtcare$disp, levels=c("M","F"))
mtcars$disp <- factor(mtcars$disp, levels=c("M","F"))
mtcars$disp
str(mtcars)
mtcars$disp
str(mtcars)
# mtcars의 배기량(disp)에 따른 hp의 회귀식
View(mtcars)
# mtcars의 배기량(disp)에 따른 hp의 회귀식
mtcars
# mtcars의 배기량(disp)에 따른 hp의 회귀식
mtcars
View(mtcars)
head(mtcars)
str(mtcars)
mtcars$disp <- factor(mtcars$disp)
dh <- subset(hf, hp)
dh <- subset(disp, hp)
dh <- subset(mtcars$disp, hp)
dh <- subset(mtcars$disp, mtcars$hp)
dh <- subset(mtcars$disp~hp)
dh <- subset(disp~hp,mtcars)
dh <- subset(mtcars, cut==c(disp~hp))
dh <- subset(mtcars, cut==c("disp","hp"))
dh <- selecy(mtcars, c("disp","hp"))
dh <- select(mtcars, c("disp","hp"))
dh <- subset(mtcars, select= c("disp","hp"))
dh
View(dh)
out<- lm(disp~hp,  data=mtcars)
out<- lm(disp~hp, data=mtcars)
out<- lm( disp ~ hp, data=mtcars)
# mtcars의 배기량(disp)에 따른 마력(hp)의 회귀식
mtcars
out<- lm( disp ~ hp, data=mtcars)
summary(out)
out<- lm( disp ~ hp, data=mtcars,stringsAsFactor = FALSE)
out<- lm( disp ~ hp, data=mtcars,stringsAsFactor = T)
out<- lm( hp~disp, data=mtcars)
summary(out)
# mtcars의 배기량(disp)에 따른 마력(hp)의 회귀식
mtcars
View(mtcars)
head(mtcars)
str(mtcars)
out<- lm(hp~disp, data=mtcars)
summary(out)
# Packages MASS안에 Boston이용하여 Boston인근 집값결정하는 다중회귀 모델
library(MASS)
str(Boston)
pairs.panels(Boston)
library(psych)
pairs.panels(Boston)
pairs.panels(Boston)
str(Boston)
head(Bpston)
head(Boston)
View(Boston)
# 독립변수(예측변수) - 영향을 미칠 것으로 생각되는 변수 - crim, tax
# 종속변수(기준변수) - 영향을 받을 것으로 생각되는 변수 - medv
# 각 계수들을 구해야한다.
# 영향 끼칠 변수(crim, tax)
# 영향 받는 변수 (medv : median value of rooms)
# str(Boston)
# head(Boston)
# View(Boston)
model <- lm( tax~ medv, data = Boston)
# 독립변수(예측변수) - 영향을 미칠 것으로 생각되는 변수 - crim, tax
# 종속변수(기준변수) - 영향을 받을 것으로 생각되는 변수 - medv
# 각 계수들을 구해야한다.
# 영향 끼칠 변수(crim, tax)
# 영향 받는 변수 (medv : median value of rooms)
# str(Boston)
# head(Boston)
# View(Boston)
model <- lm( medv~tax, data = Boston)
summary(model)
hist(Boston$medv)
qqnorm(Boston$medv)
qqline(Boston$medv)
vif(model)
require(car)
vif(model)
library("car")
library(car)
require(car)
vif(model)
install.packages(car)
install.packages("car")
library(car)
require(car)
vif(model)
vif(medv)
# 독립변수(예측변수) - 영향을 미칠 것으로 생각되는 변수 - crim, tax
# 종속변수(기준변수) - 영향을 받을 것으로 생각되는 변수 - medv
# 각 계수들을 구해야한다.
# 영향 끼칠 변수(crim, tax)
# 영향 받는 변수 (medv : median value of rooms)
# str(Boston)
# head(Boston)
# View(Boston)
model <- lm( medv~tax, data = Boston)
summary(model)
# 영향 받는 변수는 정규분포도를 가지고 있는지 확인한다.
hist(Boston$medv)
qqnorm(Boston$medv)
qqline(Boston$medv)
install.packages("car")
install.packages("car")
# install.packages("car")
# library(car)
# require(car)
lm
# install.packages("car")
# library(car)
# require(car)
lm(madv)
# install.packages("car")
# library(car)
# require(car)
lm(medv)
# 선형을 따라가다가 1 - 2 구간에서 순간 폭등한 후 2 - 3 구간에서 정체한다.
# 다중공산성
# install.packages("car")
# library(car)
# require(car)
lm(model)
vif(model)
# 선형을 따라가다가 1 - 2 구간에서 순간 폭등한 후 2 - 3 구간에서 정체한다.
# 다중공산성
# install.packages("car")
# library(car)
require(car)
vif(model)
par(mfrow=c(2,2))
lm(model)
plot(model)
fit  <- lm(medv~tax, data=Boston)
fit  <- lm(medv~tax, data=Boston)
# Packages MASS안에 Boston이용하여 Boston인근 집값결정하는 다중회귀 모델
library(MASS)
fit  <- lm(medv~tax, data=Boston)
abline(fit,col="red",lwd=2)
summary(fit)
vif <- vif(lm(medv~tax, data = Boston))
?vif <- vif(lm(medv~tax, data = Boston))
vif <- vif(lm(medv~tax,medv~crim data = Boston))
vif <- vif(lm(medv~tax,medv~crim data = Boston))
vif <- vif(lm(medv~tax,medv~crim data = Boston))
vif(lm(medv~tax,medv~crim data = Boston))
vif(lm(medv~tax,medv~crim data = Boston))
vif(lm(medv~tax,medv~crim, data = Boston))
vif(lm(medv~tax,medv~crim, data = Boston))
fit  <- lm(medv~crim, data=Boston)
abline(fit,col="red",lwd=2)
summary(fit)
fit  <- lm(medv~crim, data=Boston)
abline(fit,col="red",lwd=2)
summary(fit)
lm(model)
par(mfrow=c(2,2))
plot(model)
fit  <- lm(medv~crim, data=Boston)
abline(fit,col="red",lwd=2)
summary(fit)
plot(fit)
# 독립변수(예측변수) - 영향을 미칠 것으로 생각되는 변수 - crim, tax
# 종속변수(기준변수) - 영향을 받을 것으로 생각되는 변수 - medv
# 각 계수들을 구해야한다.
# 영향 끼칠 변수(crim, tax)
# 영향 받는 변수 (medv : median value of rooms)
# str(Boston)
head(Boston)
# 독립변수(예측변수) - 영향을 미칠 것으로 생각되는 변수 - crim, tax
# 종속변수(기준변수) - 영향을 받을 것으로 생각되는 변수 - medv
# 각 계수들을 구해야한다.
# 영향 끼칠 변수(crim, tax)
# 영향 받는 변수 (medv : median value of rooms)
# str(Boston)
head(Boston)
# View(Boston)
B <- as.data.frame(Boston[,c("crim","tax","medv")])
B
# 집값결정하는 독립변수가 될 만한 것을 골라 회귀 분석
fit <- lm(medv~crim+tax,data=Boston)
summary(fit)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
fit1 <- lm(medv~., data=Boston)
summary(fit1)
# 필요없어보이는 것을 제외하고 다시
fit2 <- lm(medv~zn+nox+rm+dis+rad+ptratio+black+lstat)
# 필요없어보이는 것을 제외하고 다시
fit2 <- lm(medv ~ zn+nox+rm+dis+rad+ptratio+black+lstat, data=Boston)
summary(fit2)
# 필요없어보이는 것을 제외하고 다시
fit3 <- lm(medv ~ nox+rm+dis+ptratio+black+lstat, data=Boston)
summary(fit3)
# AIC(Akaike Information Criterion) : 값이 적을수록 좋은 모델
AIC(fit1, fit3)
step(fit1, direction = 'backward')
fit3 <- lm(medv ~ 1, data = Boston)
step(fit3, direction = 'forward',
scope=~ nox+rm+dis+ptratio+black+lstat)
step(fit3, direction = 'forward',
scope =list(upper = fit1, lower=fit3))
library(leaps)
subsets <- regsubsets(medv~., data=Boston,
method = 'seqrep', nbest=4)
subsets
summary(subsets)
plot(subsets)
install.package('MASS')
labrary(MASS)
livrary(MASS)
install.packages("MASS")
install.packages("MASS")
install.packages("contfib.url")
chooseCRANmirror()
